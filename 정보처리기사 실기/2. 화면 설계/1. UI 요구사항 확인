# 1-1 요구사항 확인

## 1. UI 개념
- 사용자와 시스템 사이에서 의사소통할 수 있도록 고안된 물리적, 가상의 매개체
- UX (사용자 경험)는 UI를 포함

## 2. UI 유형
- CLI : 정적인 텍스트 기반 인터페이스, 명령어를 텍스트로 입력하여 조작
- GUI : 그래픽 반응 기반 인터페이스, 그래픽 환경을 기반으로 한 마우스나 전자팬 이용
- NUI : 직관적 사용자 반응 기반 인터페이스, 신체 부위 이용
- OUI : 유기적 상호 작용 기반 인터페이스, 모든 사물이 입출력장치로 변화

## 3. UI 분야
- 물리적 제어 분야 : 정보 제공과 기능 전달을 위한 하드웨어 기반
- 디자인적 분야 : 콘텐츠의 정확하고 상세한 표현과 전체적 구성
- 기능적 분야 : 사용자의 편의성에 맞춰 쉽고 간편하게 사용 가능

## 4. UI 설계 원칙
- 직관성 : 누구나 쉽게 이해, 사용
- 유효성 : 정확하고 완벽하세 사용자의 목표 달성
- 학습성 : 모두가 쉽게 배우고 사용
- 유연성 : 사용자의 요구사항을 최대한 수용, 실수 방지

## 5. UI 설계 지침
- 사용자 중심 : 사용자가 이해하기 쉽고 편하게 사용할 수 있는 환경 제공
- 일관성 : 조작법을 기억하기 쉽고 빠르게 습득할 수 있도록 설계
- 단순성 : 간단하게 작동되도록 설계
- 결과 예측 가능 : 기능만 보고 결과 예측 가능해야함
- 가시성 : 주요 기능을 메인 화면에 노출하여 쉬운 조작 가능
- 표준화 : 기능구조의 선행 학습 이후 쉽게 사용 가능
- 접근성 : 다양한 계층 수용
- 명확성 : 개념적으로 쉽게 인지해야함
- 오류 발생 해결 : 요류에 대한 상황을 정확하게 인지해야함

## 6. UI 요구사항 확인
- UI 요구사항 구분 : 기능적, 비기능적
- UI 품질 요구사항
    - 기능성 
        - 실제 수행 결과와 품질 요구사항과의 차이를 분석, 실제 사용 시 정확하지 않은 결과가 발생할 확률과 관련하여 시스템의 동작 관찰
        - 적절성, 정밀성, 상호 운용성, 보안성, 호환성
    - 신뢰성
        - 시스템이 일정한 시간 또는 작동되는 시간 동안 의도하는 기능을 수행함을 보증
        - 성숙성 : 소프트웨어 결함으로 인한 고장 회피 능력
        - 고장 허용성 : 오류가 있어도 특정 수준 이상의 성능 유지
        - 회복성 : 고장 발생 시 영향 받은 데이터 복구 및 성능 다시 확보
    - 사용성
        - 사용자와 컴퓨터 사이에 발생하는 어떠한 행위를 정확하고 쉽게 인지
        - 이해성, 학습성, 운용성
    - 효율성 
        - 할당된 시간에 한정된 자원으로 얼마나 빨리 처리할 수 있는가
        - 시간 효율성, 자원 효율성
    - 유지보수성
        - 요구사항을 개선하고 확장하는데 있어 얼마나 용이한가
        - 분석성, 변경성, 안정성, 시험성
    - 이식성
        - 다른 플랫폼에서도 많은 추가 작업 없이 얼마나 쉽게 적용이 가능한가
        - 적용성, 설치성, 대체성

# 1-2 UI 지침

## 1. UI 지침 개념
- UI 표준에 따라 사용자 이터페이스 설계, 개발 시 지켜야할 세부사항을 규정하는 가이드라인

## 2. UI 표준 적용을 위한 환경 분석
- 사용자 트렌드 분석
- 기능 및 설계 분석
    - 기능 조작성 분석
    - 오류 방지 분석
    - 최소한의 조작으로 업무 처리 가능 여부 확인
    - UI의 정보 전달력 확인

## 3. UI 개발 목표 및 범위
- UI 개발을 위한 주요 기법
    - 3C 분석 : 교개그 자사, 경쟁사를 비교하고 분석하여 어떻게 차별화해서 경쟁에서 이길 것인가를 분석
    - SWOT 분석 : 내부 환경과 외부 환경을 분석하여 강점, 약점, 기회, 위협 요인을 규정하고 경영 전략 수립
    - 시나리오 플래닝 : 불확실성이 높은 상황 변화를 사전에 예측, 다양한 시나리오를 설계 -> 불확실성 제거
    - 사용성 테스트 : 사용자가 직접 제품을 사용하면서 미리 작성된 시나리오에 맞추어 과제를 수행한 후, 질문에 답하도록 테스트
    - 워크숍

## 4. 사용자 분석 및 니즈 조사
- 리서치 대상 선정 및 내용 설계
- 리서치 진행
- 리서치 결과 정리

## 5. 사용자 요구사항 도출
- 페르소나 정의 : 잠재적 사용자의 다양한 목적과 관찰된 행동 패턴을 응집시켜 놓은 가상의 사용자
- 콘셉트 모델 정의 : 여러 가지 추상적인 콘셉트들 사이의 관계를 보여주는 다이어그램 (브레인스토밍)
- 사용자 요구사항 정의 : 리서치 및 페르소나 결과물을 토대로 요구사항을 도출, 우선순위 정함
    - 요구사항 매트릭스 : 다양한 경로를 통해 수집된 직접적인 요구사항을 검토하여, 페르소나의 목적을 기준으로 요구사항 표를 만든다.
    - 정황 시나리오 : 요구사항 정의에 사용되는 초기 시나리오를 말함. 낙관적이면서도 발생 상황에서의 이상적인 시스템 동작에 초점을 맞추는 시나리오
- UI 컨셉션 : 정리된 요구사항을 구체화하는 단계, 화면 디자인 단계 전에 대표 화면 설계를 진행

# 1-3 스토리보드

## 1. 스토리보드 개념
- UI 화면 설계를 구축하는 서비스를 위한 대부분 정보가 수록된 문서
- 와이어프레임 : 화면 단위의 레이아웃을 설계
- 스토리보드 : 서비스 구축을 위한 모든 정보가 담겨 있는 설계 산출물
- 프로토타입 : 정적인 화면으로 설계된 아이어프레임 또는 스토리보드에 동적 효과를 적용하여 실제 구현된 것처럼 시뮬레이션 할 수 있는 모형 (HTML/CSS)

## 2. 스토리보드 작성 절차
- 전체 개요 작성, 서비스 흐름 작성, 스타일 확정, 메뉴별 화면 설계도 작성 및 상세 설명, 추가 관련 정보 작성

## 3. 스토리보드 작성 시 유의사항
- 일관된 기호의 표시, 공통 영역의 정의, 영역별 세부 설계, 버전 업 관리

# 1-4 UI 프로토타입 제작 및 검토

## 1. 프로토타입 개념
- 컴퓨터의 전체적인 기능을 간략한 형태로 구현한 시제품

## 2. 프로토타입의 의의
- 시스템 설계 및 개발에 소요되는 총 비용과 노력 절감

## 3. 프로토타입의 장점 및 단점
- 장점
    - 사용자 설득과 이해 쉬움
    - 개발 시간 감소
    - 오류 사전 발견을 통한 예방 가능
- 단점
    - 수정 과정 증가 시, 작업 시간 증가 위험 존재
    - 요구사항에 대한 적절한 타협 필요
    - 자원 효율성 관점에서는 필요 이상의 많은 자원 소모